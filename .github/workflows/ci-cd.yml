name: React Vite CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - demo

env:
  NODE_VERSION: '20'
  DEPLOY_URL: ${{ secrets.DEPLOY_URL || 'http://192.168.111.200' }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: üß™ Run Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run tests
        run: npm test -- --run
        continue-on-error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    name: üî® Build Application
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30

  deploy:
    runs-on: ${{ github.ref == 'refs/heads/main' && 'self-hosted' || 'ubuntu-latest' }}
    needs: build
    name: üöÄ Deploy to Production
    if: github.event_name != 'pull_request'
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'demo' }}
      url: ${{ env.DEPLOY_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Deploy to Server (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "üöÄ Starting production deployment"
          echo "üì¶ Repository: ${{ github.repository }}"
          echo "üîÑ Commit: ${{ github.sha }}"
          echo "üèÉ Run: #${{ github.run_number }}"
          
          # Deployment logic here
          echo "‚úÖ Deployment completed successfully"

      - name: Deploy to Server (Demo Mode)
        if: github.ref != 'refs/heads/main'
        run: |
          echo "üöÄ Starting demo deployment"
          echo "üì¶ Repository: ${{ github.repository }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "‚úÖ Demo deployment completed"

  performance:
    runs-on: ubuntu-latest
    needs: build
    name: üéØ Performance Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Check bundle size
        run: |
          echo "üìä Analyzing bundle size..."
          du -sh dist/
          find dist -name "*.js" -exec ls -lh {} \;
          
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        if: false # Disabled for now, can be enabled when needed
        with:
          uploadArtifacts: true
          temporaryPublicStorage: true

  notify:
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    name: üì¢ Deployment Notifications
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          # Set deployment type
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            DEPLOY_TYPE="Production"
            DEPLOY_TARGET="React Vite Application"
          else
            DEPLOY_TYPE="Demo"
            DEPLOY_TARGET="Simulation Mode"
          fi
          
          echo "## üöÄ $DEPLOY_TYPE Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Type:** $DEPLOY_TYPE" >> $GITHUB_STEP_SUMMARY
          echo "- **Target:** $DEPLOY_TARGET" >> $GITHUB_STEP_SUMMARY
          echo "- **Framework:** React + Vite + React Router" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ needs.deploy.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üéâ $DEPLOY_TYPE deployment completed successfully!"
          else
            echo "‚ùå $DEPLOY_TYPE deployment failed. Check logs for details."
            exit 1
          fi