# Optimized Virtual Host for MCP Server
# File: /etc/nginx/sites-available/mcp-optimized

# Upstream backend configuration
upstream mcp_backend {
    # Backend servers with health checks
    server 127.0.0.1:8080 max_fails=3 fail_timeout=30s weight=1;
    # server 127.0.0.1:8081 max_fails=3 fail_timeout=30s weight=1;
    
    # Load balancing method
    # least_conn;  # Use least connections
    # ip_hash;     # Use IP hash for session persistence
    
    # Keep alive connections
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name 192.168.111.200 mcp.yourdomain.com;
    
    # Redirect all HTTP traffic to HTTPS
    return 301 https://$server_name$request_uri;
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name 192.168.111.200 mcp.yourdomain.com;
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/yourdomain.com/chain.pem;
    
    # Security headers
    include /etc/nginx/snippets/security-headers.conf;
    
    # Performance settings
    expires $expires;
    add_header Cache-Control "public, no-transform";
    
    # Rate limiting
    limit_req zone=general burst=20 nodelay;
    limit_conn addr 10;
    
    # Root directory and index
    root /var/www/mcp;
    index index.html index.htm;
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # Health check endpoint (nginx level)
    location /nginx-health {
        access_log off;
        return 200 "nginx healthy\n";
        add_header Content-Type text/plain;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # Main application proxy
    location / {
        # Try static files first, then proxy
        try_files $uri $uri/ @mcp_proxy;
    }
    
    # MCP application proxy
    location @mcp_proxy {
        # Proxy configuration
        proxy_pass http://mcp_backend;
        proxy_http_version 1.1;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header Connection "";
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Keep alive
        proxy_set_header Connection "";
        
        # Cache configuration
        proxy_cache PROXY;
        proxy_cache_valid 200 302 10m;
        proxy_cache_valid 404 1m;
        proxy_cache_bypass $http_pragma $http_authorization;
        proxy_no_cache $http_pragma $http_authorization;
        
        # Add cache status header
        add_header X-Cache-Status $upstream_cache_status;
    }
    
    # API endpoints with enhanced configuration
    location /api/ {
        # Rate limiting for API
        limit_req zone=api burst=50 nodelay;
        
        # Proxy to backend
        proxy_pass http://mcp_backend/api/;
        proxy_http_version 1.1;
        
        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        
        # API-specific headers
        proxy_set_header X-API-Key $http_x_api_key;
        proxy_set_header Authorization $http_authorization;
        
        # Timeouts (shorter for API)
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        # No caching for API responses
        proxy_cache off;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, X-API-Key" always;
        add_header Access-Control-Max-Age 86400 always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
    
    # Static assets optimization
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|otf)$ {
        # Long cache for static assets
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # CORS for fonts
        add_header Access-Control-Allow-Origin "*";
        
        # Try files with fallback
        try_files $uri $uri/ =404;
        
        # Disable access log for static files
        access_log off;
        
        # Optimize delivery
        tcp_nodelay off;
        tcp_nopush on;
    }
    
    # WebSocket support (if needed)
    location /ws/ {
        proxy_pass http://mcp_backend/ws/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket timeouts
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
    }
    
    # Admin area with restricted access
    location /admin/ {
        # IP whitelist (configure as needed)
        # allow 192.168.1.0/24;
        # allow 10.0.0.0/8;
        # deny all;
        
        # Strong rate limiting
        limit_req zone=login burst=5 nodelay;
        
        # Additional security headers
        add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive" always;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        
        # Proxy to backend
        proxy_pass http://mcp_backend/admin/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Security: Block access to sensitive files
    location ~* \.(htaccess|htpasswd|ini|log|sh|sql|conf|bak|backup|old|tmp)$ {
        deny all;
        return 403;
    }
    
    # Security: Block version control directories
    location ~ /\.(git|svn|hg|bzr) {
        deny all;
        return 403;
    }
    
    # Security: Block PHP execution (if not needed)
    location ~* \.php$ {
        return 403;
    }
    
    # Logging with detailed format
    access_log /var/log/nginx/mcp-optimized.access.log detailed buffer=64k flush=5s;
    error_log /var/log/nginx/mcp-optimized.error.log warn;
}

# Development/staging server (HTTP only)
server {
    listen 8888;
    server_name 192.168.111.200;
    
    # Basic configuration for development
    root /var/www/mcp-dev;
    index index.html;
    
    # No SSL, simplified configuration
    location / {
        proxy_pass http://mcp_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
    
    # Development logging
    access_log /var/log/nginx/mcp-dev.access.log main;
    error_log /var/log/nginx/mcp-dev.error.log debug;
}
